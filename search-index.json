{"keys":["title","text"],"items":[{"title":"README","text":"atscm\nSource code management utilities for atvise\n\nCircleCI [https://circleci.com/gh/atSCM/atscm.svg?style=shield] [https://circleci.com/gh/atSCM/workflows/atscm]codecov [https://codecov.io/gh/atSCM/atscm/branch/master/graph/badge.svg] [https://codecov.io/gh/atSCM/atscm]ESDoc [https://atscm.github.io/atscm/badge.svg] [https://atscm.github.io/atscm]\n\natscm is a node.js [https://nodejs.org] based utility that stores the contents of atvise projects on the file system. This has several benefits to advanced atvise developers:\n\n * atvise project can be put under source control (e.g. using git)\n * source code can be edited in external editors\n * easier unit testing\n * easier source code linting / static analysis\n * source files can be preprocessed by using custom transformers:  * using alternate programming languages such as ES2015 JavaScript [http://babeljs.io/learn-es2015/] or TypeScript [https://www.typescriptlang.org]\n    * using alternate markup languages such as pug [https://pugjs.org]\n    * using templating engines such as handlebars [http://handlebarsjs.com]\n   \n   \n\nInstallation\nPrerequisite: Install node.js (version 10 or later)\n\nHow to check which version is installed * Make sure node.js [https://nodejs.org] (version 10 or later) is installed by running node --version.\n * Make sure npm [https://www.npmjs.com] is installed by running npm --version.\n\nWith atscm-cli\natscm can be installed via atscm-cli [https://github.com/atSCM/atscm-cli].\n\nRun npm install --global atscm-cli to install atscm-cli globally. You may have to run this command as an administrator.\n\nWith atscm-cli [https://github.com/atSCM/atscm-cli] installed run atscm init to create a new atscm project.\n\nWith npm init\nSimply run npm init atscm to create a new atscm project.\n\nBasic usage\nPulling nodes from atvise server\n\nRunning atscm pull will download all nodes from atvise server into the ./src folder inside your project.\n\nBy default only displays, serverside scripts and quickdynamics will be split into their JavaScript and SVG sources. You can specify additional transformers to use in your Project configuration file.\n\nPushing source files to atvise server\n\nRunning atscm push will update all nodes from the contents of your ./src folder.\n\nAutomatically watching for changes\n\nAfter running atscm watch files and atvise server nodes are watched for changes. If a file changes, the file is pushed, if a node changes this node is pulled.\n\natscm watch is very useful if you want edit source files in an external editor but still have the ability to use atvise builder's drag and drop functionality.\n\nProject configuration\nAn atscm project's configuration is stored inside the Atviseproject file inside your project root. See the Atviseproject class reference [https://atscm.github.io/atscm/class/src/lib/config/Atviseproject.js~Atviseproject.html] for available options.","link":false,"version":"latest"},{"title":"README","text":"atscm\nSource code management utilities for atvise\n\nCircleCI [https://circleci.com/gh/atSCM/atscm.svg?style=shield] [https://circleci.com/gh/atSCM/workflows/atscm]codecov [https://codecov.io/gh/atSCM/atscm/branch/master/graph/badge.svg] [https://codecov.io/gh/atSCM/atscm]ESDoc [https://atscm.github.io/atscm/badge.svg] [https://atscm.github.io/atscm]\n\natscm is a node.js [https://nodejs.org] based utility that stores the contents of atvise projects on the file system. This has several benefits to advanced atvise developers:\n\n * atvise project can be put under source control (e.g. using git)\n * source code can be edited in external editors\n * easier unit testing\n * easier source code linting / static analysis\n * source files can be preprocessed by using custom transformers:  * using alternate programming languages such as ES2015 JavaScript [http://babeljs.io/learn-es2015/] or TypeScript [https://www.typescriptlang.org]\n    * using alternate markup languages such as pug [https://pugjs.org]\n    * using templating engines such as handlebars [http://handlebarsjs.com]\n   \n   \n\nInstallation\nPrerequisite: Install node.js (version 10 or later)\n\nHow to check which version is installed * Make sure node.js [https://nodejs.org] (version 10 or later) is installed by running node --version.\n * Make sure npm [https://www.npmjs.com] is installed by running npm --version.\n\nWith atscm-cli\natscm can be installed via atscm-cli [https://github.com/atSCM/atscm-cli].\n\nRun npm install --global atscm-cli to install atscm-cli globally. You may have to run this command as an administrator.\n\nWith atscm-cli [https://github.com/atSCM/atscm-cli] installed run atscm init to create a new atscm project.\n\nWith npm init\nSimply run npm init atscm to create a new atscm project.\n\nBasic usage\nPulling nodes from atvise server\n\nRunning atscm pull will download all nodes from atvise server into the ./src folder inside your project.\n\nBy default only displays, serverside scripts and quickdynamics will be split into their JavaScript and SVG sources. You can specify additional transformers to use in your Project configuration file.\n\nPushing source files to atvise server\n\nRunning atscm push will update all nodes from the contents of your ./src folder.\n\nAutomatically watching for changes\n\nAfter running atscm watch files and atvise server nodes are watched for changes. If a file changes, the file is pushed, if a node changes this node is pulled.\n\natscm watch is very useful if you want edit source files in an external editor but still have the ability to use atvise builder's drag and drop functionality.\n\nProject configuration\nAn atscm project's configuration is stored inside the Atviseproject file inside your project root. See the Atviseproject class reference [https://atscm.github.io/atscm/class/src/lib/config/Atviseproject.js~Atviseproject.html] for available options.","link":false,"version":"beta"},{"title":"readNode","text":"Reads a single node's value.","link":"api/#.-api-readNode"},{"title":"writeNode","text":"Writes a single node's value.","link":"api/#.-api-writeNode"},{"title":"callMethod","text":"Calls an OPC-UA method on the server.","link":"api/#.-api-callMethod"},{"title":"callScript","text":"Calls a server script on the server.","link":"api/#.-api-callScript"},{"title":"createNode","text":"Creates a new Node on the server.","link":"api/#.-api-createNode"},{"title":"addReferences","text":"Adds references to a node.","link":"api/#.-api-addReferences"},{"title":"path","text":"The path to the project's configuration file.","link":"api/#config-ProjectConfig-path"},{"title":"ProjectConfig","text":"The current project's configuration, with overrides (through ATSCM_PROJECT__ env\nvars) already handled.","link":"api/#config-ProjectConfig-ProjectConfig"},{"title":"loadProjectRequirement","text":"","link":"api/#hooks-check-atserver-loadProjectRequirement"},{"title":"loadRemoteVersion","text":"","link":"api/#hooks-check-atserver-loadRemoteVersion"},{"title":"askForConfirmation","text":"","link":"api/#hooks-check-atserver-askForConfirmation"},{"title":"approveToContinue","text":"","link":"api/#hooks-check-atserver-approveToContinue"},{"title":"checkAtserver","text":"","link":"api/#hooks-check-atserver-checkAtserver"},{"title":"checkServerscripts","text":"","link":"api/#hooks-check-serverscripts-checkServerscripts"},{"title":"setupContext","text":"","link":"api/#hooks-hooks-setupContext"},{"title":"InitTask","text":"The action run when running \"atscm init\".","link":"api/#init-InitTask-InitTask"},{"title":"ConfigLangs","text":"A map providing dirnames for config langs","link":"api/#init-Options-ConfigLangs"},{"title":"InitOptions","text":"Options available for the \"atscm init\" command.","link":"api/#init-Options-InitOptions"},{"title":"InitOptionsAsArray","text":"{@link InitOptions}, exported as an array. Required to run {@link Inquirer}.","link":"api/#init-Options-InitOptionsAsArray"},{"title":"InitOptionsValidator","text":"A static class containing validators for the options used when running \"atscm\ninit\".","link":"api/#init-OptionsValidator-InitOptionsValidator"},{"title":"encodeVariant","text":"Returns a buffer containing a {@link node-opcua~Variant}s encoded value.","link":"api/#lib-coding-encodeVariant"},{"title":"decodeVariant","text":"Returns a {@link node-opcua~Variant} from a Buffer with the given dataType and \narrayType.","link":"api/#lib-coding-decodeVariant"},{"title":"Atviseproject","text":"An atscm project's configuration.","link":"api/#libconfig-Atviseproject-Atviseproject"},{"title":"ImportStream","text":"A stream that imports xml files in parallel.","link":"api/#libgulp-ImportStream-ImportStream"},{"title":"PullStream","text":"A stream that transforms read {@link ReadStream.ReadResult}s and stores the on\nthe filesystem.","link":"api/#libgulp-PullStream-PullStream"},{"title":"PushStream","text":"A stream that transforms read {@link vinyl~File}s and pushes them to atvise\nserver.","link":"api/#libgulp-PushStream-PushStream"},{"title":"renameConfigPath","text":"Relative path to the rename file.","link":"api/#libgulp-dest-renameConfigPath"},{"title":"WriteStream","text":"A stream that writes {@link Node}s to the file system.","link":"api/#libgulp-dest-WriteStream"},{"title":"dest","text":"Creates a new {@link WriteStream} to write to path.","link":"api/#libgulp-dest-dest"},{"title":"FileNode","text":"A node returned by the {@link SourceStream}.","link":"api/#libgulp-src-FileNode"},{"title":"isDefinitionFile","text":"Returns true for definition file paths.","link":"api/#libgulp-src-isDefinitionFile"},{"title":"SourceBrowser","text":"Browses the local file system for nodes.","link":"api/#libgulp-src-SourceBrowser"},{"title":"src","text":"Starts a new source browser at the given path.","link":"api/#libgulp-src-src"},{"title":"reverse","text":"Switches keys and values in an object. E.G.: { \"a\": 1 } becomes { 1: \"a\" }.","link":"api/#libhelpers-Object-reverse"},{"title":"pick","text":"Picks some properties from an object and returns a new object containing these.","link":"api/#libhelpers-Object-pick"},{"title":"delay","text":"Returns a promise that resolves after the given duration.","link":"api/#libhelpers-async-delay"},{"title":"promisified","text":"Wraps a function with an async callback in a promise.","link":"api/#libhelpers-async-promisified"},{"title":"updateFile","text":"","link":"api/#libhelpers-fs-updateFile"},{"title":"updateJson","text":"","link":"api/#libhelpers-fs-updateJson"},{"title":"reportProgress","text":"Prints the progress of a task.","link":"api/#libhelpers-log-reportProgress"},{"title":"sortReferences","text":"Sorts the given references before they are persisted to disk.","link":"api/#libhelpers-mapping-sortReferences"},{"title":"handleTaskError","text":"Adds additional infomation to the error's message and rethows it.","link":"api/#libhelpers-tasks-handleTaskError"},{"title":"finishTask","text":"Closes open sessions once a task is complete.","link":"api/#libhelpers-tasks-finishTask"},{"title":"InitOption","text":"An option the \"atscm init\" command handles. TODO: Support function values for\nname, message, default, choices...","link":"api/#libinit-Option-InitOption"},{"title":"ReferenceTypeIds","text":"References type ids.","link":"api/#libmodel-Node-ReferenceTypeIds"},{"title":"ReferenceTypeNames","text":"Names for references.","link":"api/#libmodel-Node-ReferenceTypeNames"},{"title":"Node","text":"The main model class.","link":"api/#libmodel-Node-Node"},{"title":"ServerNode","text":"A node during a pull.","link":"api/#libmodel-Node-ServerNode"},{"title":"SourceNode","text":"A node during a push.","link":"api/#libmodel-Node-SourceNode"},{"title":"NodeId","text":"A wrapper around {@link node-opcua~NodeId}.","link":"api/#libmodelopcua-NodeId-NodeId"},{"title":"ReverseReferenceTypeIds","text":"Reverse map of {@link node-opcua~ReferenceTypeId}s.","link":"api/#libmodelopcua-ReverseReferenceTypeIds-ReverseReferenceTypeIds"},{"title":"specialChars","text":"Special characters in regular expressions.","link":"api/#lib-regexp-specialChars"},{"title":"specialCharsRegExp","text":"A regular expression that matches all special characters in regular expressions.","link":"api/#lib-regexp-specialCharsRegExp"},{"title":"escapeForRegExp","text":"Returns a string with all special regular expression characters escaped.","link":"api/#lib-regexp-escapeForRegExp"},{"title":"AddReferencesStream","text":"A stream that adds non-standard references to nodes when pushed.","link":"api/#libserver-AddReferencesStream-AddReferencesStream"},{"title":"ExtensionForDataType","text":"A map providing shorter extensions for data types","link":"api/#libserver-AtviseFile-ExtensionForDataType"},{"title":"DataTypeForExtension","text":"A map providing data types for shorter extensions (Reverse of {@link\nDataTypeForExtension}).\n\n * @type {Map<String, node-opcua~DataType>}","link":"api/#libserver-AtviseFile-DataTypeForExtension"},{"title":"AtviseFile","text":"An extension to {@link vinyl~File} providing some additional, atvise-related\nproperties.","link":"api/#libserver-AtviseFile-AtviseFile"},{"title":"CreateNodeStream","text":"A stream that creates OPC-UA nodes for the passed {@link AtviseFiles}s.","link":"api/#libserver-CreateNodeStream-CreateNodeStream"},{"title":"BrowsedNode","text":"A node discovered while browsing the server's database.","link":"api/#libserver-NodeBrowser-BrowsedNode"},{"title":"NodeBrowser","text":"Browses the server database.","link":"api/#libserver-NodeBrowser-NodeBrowser"},{"title":"NodeStream","text":"A stream of server nodes.","link":"api/#libserver-NodeStream-NodeStream"},{"title":"QueueStream","text":"A stream that process atvise server requests in parallel.","link":"api/#libserver-QueueStream-QueueStream"},{"title":"Session","text":"A wrapper around {@link node-opcua~ClientSession} used to connect to atvise\nserver. The sessions currentyl being opened.","link":"api/#libserver-Session-Session"},{"title":"Stream","text":"An object transform stream connected to atvise server.","link":"api/#libserver-Stream-Stream"},{"title":"AtviseResourceType","text":"An atvise-related resource type.","link":"api/#libserver-Types-AtviseResourceType"},{"title":"AtviseTypes","text":"The atvise types to handle. Ordering matters: The {@link MappingTransformer}\ntakes the first match, therefore plain types should always come before resource\ntypes!","link":"api/#libserver-Types-AtviseTypes"},{"title":"waitForDependencies","text":"A mixin that transforms a regular stream into a {@link WaitingStream}, which\nmakes it wait for a node's dependencies to be transformed.","link":"api/#libserver-WaitingStream-waitForDependencies"},{"title":"WaitingStream","text":"A {@link QueueStream} that waits for a file's dependencies to be processed\nbefore the file is processed itself.","link":"api/#libserver-WaitingStream-WaitingStream"},{"title":"Watcher","text":"Watches the given nodes for value changes.","link":"api/#libserver-Watcher-Watcher"},{"title":"WriteStream","text":"A stream that writes all read {@link AtviseFile}s to their corresponding nodes\non atvise server. The underlying {@link TreeStream} ensures the nodes are\nprocessed in an order that respects the parent-child relations between nodes.\nNodes are created (if needed) before their children are processed.","link":"api/#libserver-WriteStream-WriteStream"},{"title":"CallMethodStream","text":"A stream that calls an OPC-UA method for all input files.","link":"api/#libserverscripts-CallMethodStream-CallMethodStream"},{"title":"CallScriptStream","text":"A stream that calls atvise server scripts for all passed nodes.","link":"api/#libserverscripts-CallScriptStream-CallScriptStream"},{"title":"versionNode","text":"The node containing the currently installed server-scripts version.","link":"api/#libserverscripts-version-versionNode"},{"title":"ModernPartialTransformer","text":"A transformer that transforms only some of the files read.","link":"api/#libtransform-PartialTransformer-ModernPartialTransformer"},{"title":"SplittingTransformer","text":"A transformer that splits a node into multiple source nodes when pulling.","link":"api/#libtransform-SplittingTransformer-SplittingTransformer"},{"title":"TransformDirection","text":"The directions a transformer can be run in.","link":"api/#libtransform-Transformer-TransformDirection"},{"title":"Transformer","text":"The base transformer class.","link":"api/#libtransform-Transformer-Transformer"},{"title":"XMLTransformer","text":"A transformer used to transform XML documents.","link":"api/#libtransform-XMLTransformer-XMLTransformer"},{"title":"importTask","text":"Imports all xml files needed for atscm usage.","link":"api/#tasks-import-importTask"},{"title":"performPull","text":"Pulls the given nodes from the server.","link":"api/#tasks-pull-performPull"},{"title":"pull","text":"Pulls all nodes from atvise server.","link":"api/#tasks-pull-pull"},{"title":"performPush","text":"Pushes the given path to the server.","link":"api/#tasks-push-performPush"},{"title":"push","text":"Pushes {@link AtviseFile}s to atvise server.","link":"api/#tasks-push-push"},{"title":"WatchTask","text":"The task executed when running atscm watch.","link":"api/#tasks-watch-WatchTask"},{"title":"watch","text":"The gulp task invoced when running atscm watch.","link":"api/#tasks-watch-watch"},{"title":"LintTransformer","text":"A transformer ensuring no invalid alarm condition filter nodes are pulled.","link":"api/#transform-AlarmConfigTransformer-LintTransformer"},{"title":"DisplayTransformer","text":"Splits read atvise display XML nodes into their SVG and JavaScript sources,\nalongside with a .json file containing the display's parameters.","link":"api/#transform-DisplayTransformer-DisplayTransformer"},{"title":"MappingTransformer","text":"A Transformer that maps {@link ReadStream.ReadResult}s to {@link AtviseFile}s.","link":"api/#transform-Mapping-MappingTransformer"},{"title":"NewlinesTransformer","text":"A transformer that handles newline characters in files. During a pull, all\nbreaks are converted the OS-native EOL character and (optionally) a trailing\nnewline is added (for better git diffs). On push, CRLF characters are used and\nthose trailing newlines are removed again.","link":"api/#transform-Newlines-NewlinesTransformer"},{"title":"cleanup","text":"Cleans up after the app ended with the specified code or signal.","link":"api/#util-cleanup-cleanup"},{"title":"getStat","text":"Returns the {@link fs~Stats} for a path.","link":"api/#util-fs-getStat"},{"title":"validateDirectoryExists","text":"Checks it a given path holds a directory and returns it's {@link fs~Stats} if\nfound.","link":"api/#util-fs-validateDirectoryExists"},{"title":"Beta API reference","version":"beta","link":"api"}]}