[{"title":"Updating atscm","slug":"updating-atscm","description":"<h1 id=\"updating-atscm\">Updating atscm</h1><blockquote>\n<p>You can use atscm to update atscm ðŸ˜€</p>\n</blockquote>\n<h2 id=\"installing-new-versions\">Installing new versions</h2><p>Simply run <code>atscm update</code> to install the latest version available. Add the <code>--beta</code> flag to install prerelease versions. Ensure to <strong>backup your project</strong> before doing so.</p>\n<blockquote>\n<p>Internally, we use <a href=\"https://www.npmjs.com\">npm</a> to install updates, which means that you can also run <code>npm install --save-dev atscm</code> instead.</p>\n</blockquote>\n<h2 id=\"updating-your-atscm-project\">Updating your atscm project</h2><p>We&#39;ll do our best to follow <a href=\"https://semver.org\">semantic versioning</a>, which means you shouldn&#39;t need to update your project sourc</p>"},{"title":"Tutorial: Custom Transformer","slug":"tutorial-custom-transformer","description":"<h1 id=\"tutorial-custom-transformer\">Tutorial: Custom Transformer</h1><blockquote>\n<p>tl;dr: Jump to the <a href=\"https://github.com/atSCM/tutorial-custom-transformer\">tutorial-custom-transformer repository</a> to see the results.</p>\n</blockquote>\n<p>In this document we&#39;ll guide you through the steps necessary to implement a custom Transformer.\nOur transformer will use <a href=\"http://babeljs.io\">Babel</a> to transpile ES2015/ES6 JavaScript to plain ES5 JavaScript that works in all Browsers.</p>\n<h2 id=\"overview\">Overview</h2><p>Custom transformers provide an easy way to extend the build functionality of <em>atscm</em>. Basically, a transformer implements two behaviours: How atvise server nodes are ma</p>"},{"title":"Node ID conflicts","slug":"node-id-conflicts","description":"<h1 id=\"node-id-conflicts\">Node ID conflicts</h1><blockquote>\n<p><strong>Note that rename files are not available for atscm &lt; v1.0.0.</strong> Use <code>atscm update</code> to use the latest version</p>\n</blockquote>\n<h2 id=\"how-atscm-handles-id-conflicts\">How atscm handles id conflicts</h2><p>Let&#39;s assume we have two atvise server nodes, <em>AGENT.OBJECT.conflictingnode</em> and <em>AGENT.OBJECT.ConflictingNode</em>. These are valid node ids on the server, but when stored to the (case-insensitive) filesystem, the behaviour is undefined.</p>\n<p>When <em>atscm</em> discovers such a name conflict it creates a <em>rename file</em> at <code>./atscm/rename.json</code>. This file will con</p>"},{"title":"Guide: gulp.js plugins","slug":"guide-gulpjs-plugins","description":"<h1 id=\"guide-gulpjs-plugins\">Guide: gulp.js plugins</h1><blockquote>\n<p><strong>Please note:</strong> This guide assumes you have a basic knowledge on how gulp.js and custom <em>atscm</em> transformers work. You may go through <a href=\"https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md\">gulp&#39;s getting started guide</a> or the <a href=\"https://atscm.github.io/atscm/manual/tutorial/custom-transformer.html\">custom transformer tutorial</a> first otherwise.</p>\n</blockquote>\n<p><em>atscm</em> heavily relies on the <a href=\"http://gulpjs.com\">gulp.js</a> build tool. Therefore it&#39;s pretty easy to integrate existing <a href=\"http://gulpjs.com/plugins/\">gulp plugins</a> into <em>atscm</em> transformers.</p>\n<h2 id=\"using-transformer-class\">Using <em>Transformer</em> class</h2><p>Basically, the only Transformer method you have to override is <a href=\"https://atscm.github.io/atscm/class/src/lib/transform/Transformer.js~Transformer.html#instance-method-applyToStream\">Transformer#applyToStream</a>. In there, </p>"},{"title":"Guide: Debugging atscm","slug":"guide-debugging-atscm","description":"<h1 id=\"guide-debugging-atscm\">Guide: Debugging atscm</h1><p><em>atscm</em> can be easily debugged using Google Chrome&#39;s developer tools. All you have to do to attach the debugger, is to start the command line interface with the <code>--inspect</code> or <code>--inspect-brk</code> flag. For this to work you must first find the path to <em>atscm-cli</em>&#39;s executable:</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">which</span> atscm</code></pre>\n<p><strong>Note: This only works on Linux and macOS only</strong></p>\n<p>You can now use this executable directly and run it with the inspector flags, e.g.:</p>\n<pre><code class=\"language-bash\">node --inspect-brk <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$(which atscm)</span>\"</span> [arguments passed to atscm]</code></pre>"},{"title":"Guide: Error handling","slug":"guide-error-handling","description":"<h1 id=\"guide-error-handling\">Guide: Error handling</h1><h2 id=\"adding-source-locations\">Adding source locations</h2><p>When a throwing an Error that was caused by client code, you should provide location info so it can be traced back to the source code.</p>\n<p>To do so, simply add additional properties to the error object, containing the source code, the start location and (optionally) the end location.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">myTransformCode</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> sourceCode = <span class=\"hljs-string\">'the code transformed'</span>;\n\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-comment\">// Do something that may throw an error...</span>\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-built_in\">Object</span>.assign(error, </code></pre>"},{"title":"Guide: Using the API","slug":"guide-using-the-api","description":"<h1 id=\"guide-using-the-api\">Guide: Using the API</h1><blockquote>\n<p>Learn how to use the atscm API to e.g. run server serverscripts in your node application.\n<strong>Available since atscm v1.0.0.</strong> Use <code>atscm update</code> to use the latest version</p>\n</blockquote>\n<h2 id=\"installation\">Installation</h2><p>First of all, make sure your project has atscm installed: Take a look at your <em>package.json</em> file and make sure, atscm is present in the <em>dependencies</em> or (depending on your use case) <em>devDependencies</em> section. Otherwise, <strong>install atscm if necessary</strong>:</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># If you need atscm as a runtime-dependency</span>\nnpm install --s</code></pre>"},{"title":"Contribute: Testing atscm","slug":"contribute-testing-atscm","description":"<h1 id=\"contribute-testing-atscm\">Contribute: Testing atscm</h1><p>atscm uses both unit and integration tests. <a href=\"https://mochajs.org\">Mocha</a> is used as a test runner and <a href=\"https://github.com/istanbuljs/nyc#readme\">nyc</a> for test coverage reports.</p>\n<p><strong>Test scripts:</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Command</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>npm run test</code></td>\n<td align=\"left\">Run all tests</td>\n</tr>\n<tr>\n<td align=\"left\"><code>npm run test:unit</code></td>\n<td align=\"left\">Run all unit tests</td>\n</tr>\n<tr>\n<td align=\"left\"><code>npm run test:integration</code></td>\n<td align=\"left\">Run all integration tests</td>\n</tr>\n<tr>\n<td align=\"left\"><code>npm run test:watch</code></td>\n<td align=\"left\">Re-run all tests when files change</td>\n</tr>\n<tr>\n<td align=\"left\"><code>npm run test:coverage</code></td>\n<td align=\"left\">Check test coverage</td>\n</tr>\n</tbody></table>\n<h2 id=\"unit-tests\">Unit tests</h2><p>The unit tests are located inside <code>./test/src</code>. Test files are named after the module they test,</p>"},{"title":"Contributing","slug":"contributing","description":"<h1 id=\"contributing\">Contributing</h1><p>We would love for you to contribute to atSCM. As a contributor, here are the guidelines we would like you to follow:</p>\n<h2 id=\"found-a-bug\">Found a bug?</h2><p>If you find a bug in the source code, you can help us by submitting an issue to this repository. Even better, you can submit a Pull Request with a fix.</p>\n<h2 id=\"missing-a-feature\">Missing a feature?</h2><p>You can <em>request</em> a new feature by submitting an issue to this repository. If you would like to <em>implement</em> a new feature, please submit an issue with a proposal for your work first, to be sure</p>"},{"title":"Changelog","slug":"changelog","description":"\n<h2 id=\"141-beta1-2021-02-16\">1.4.1-beta.1 (2021-02-16)</h2><h3 id=\"bug-fixes\">Bug Fixes</h3><ul>\n<li><strong>circleci:</strong> Reset documentation changes after release (<a href=\"https://github.com/atSCM/atscm/commits/8337142\">8337142</a>)</li>\n<li>Test change (<a href=\"https://github.com/atSCM/atscm/commits/ede3881\">ede3881</a>)</li>\n</ul>\n<p><a name=\"atscm-v1.4.0\"></a></p>\n<h1 id=\"atscm-v140-2021-02-15\">atscm-v1.4.0 (2021-02-15)</h1><h3 id=\"features\">Features</h3><ul>\n<li><strong>atscm:</strong> Support for atvise server 3.5.x (<a href=\"https://github.com/atSCM/atscm/issues/432\">#432</a>) (<a href=\"https://github.com/atSCM/atscm/commits/853e347\">853e347</a>)</li>\n</ul>\n<p><a name=\"atscm-v1.3.0\"></a></p>\n<h1 id=\"atscm-v130-2021-02-11\">atscm-v1.3.0 (2021-02-11)</h1><h3 id=\"features-1\">Features</h3><ul>\n<li><strong>atscm:</strong> Allow sorting of XML attributes (<a href=\"https://github.com/atSCM/atscm/issues/438\">#438</a>) (<a href=\"https://github.com/atSCM/atscm/commits/31cf329\">31cf329</a>)</li>\n</ul>\n<p><a name=\"atscm-v1.2.0\"></a></p>\n<h1 id=\"atscm-v120-2021-01-30\">atscm-v1.2.0 (2021-01-30)</h1><h3 id=\"features-2\">Features</h3><ul>\n<li>Add JSON schemas for config files (<a href=\"https://github.com/atSCM/atscm/issues/435\">#435</a>) (<a href=\"https://github.com/atSCM/atscm/commits/fbc2fbb\">fbc2fbb</a>)</li>\n</ul>\n<p><a name=\"create-atscm-v0.1.0\"></a></p>\n<h1 id=\"create-atscm-v010-2021-01-25\">create-atscm-v0.1.0 (2021-01-25)</h1><p><a name=\"atscm-v1.1.3\"></a></p>\n<h1 id=\"atscm-v113-2021-01-25\">atscm-v1.1.3 (2021-01-25)</h1><h3 id=\"bug-fixes-1\">Bug Fixes</h3><ul>\n<li><strong>init:</strong> Rename gitignore in init template</li></ul>"}]