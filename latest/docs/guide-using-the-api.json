{"content":"<h1 id=\"guide-using-the-api\">Guide: Using the API</h1><blockquote>\n<p>Learn how to use the atscm API to e.g. run server serverscripts in your node application.\n<strong>Available since atscm v1.0.0.</strong> Use <code>atscm update</code> to use the latest version</p>\n</blockquote>\n<h2 id=\"installation\">Installation</h2><p>First of all, make sure your project has atscm installed: Take a look at your <em>package.json</em> file and make sure, atscm is present in the <em>dependencies</em> or (depending on your use case) <em>devDependencies</em> section. Otherwise, <strong>install atscm if necessary</strong>:</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># If you need atscm as a runtime-dependency</span>\nnpm install --save atscm\n\n<span class=\"hljs-comment\"># If you need atscm as a development dependency (most likely)</span>\nnpm install --save-dev atscm</code></pre>\n<h2 id=\"configuration\">Configuration</h2><p>Similar to regular atscm projects, you need an <em>Atviseproject</em> file that contains atscm&#39;s configuration. A minimal example may look like this:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// Atviseproject.js</span>\n<span class=\"hljs-keyword\">const</span> { Atviseproject } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'atscm'</span>);\n\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ApiProject</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Atviseproject</span> </span>{\n  <span class=\"hljs-comment\">// Add your configuration here, if needed.</span>\n  <span class=\"hljs-comment\">// By default, atvise server is assumed to run on opc.tcp://localhost:4840</span>\n};</code></pre>\n<p>Before you can finally require the atscm API in your project, you have to <strong>set the <code>ATSCM_CONFIG_PATH</code> environment variable</strong>, pointing to your <em>Atviseproject</em> file. You can do this in multiple ways:</p>\n<ul>\n<li><p>You can set it in your app at runtime (<em>recommended</em>)</p>\n<p>Adjust your app&#39;s entry file (assuming it&#39;s called <em>app.js</em> in these examples) to set the variable <strong>before you import atscm</strong>:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// app.js</span>\n<span class=\"hljs-keyword\">const</span> { join } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n\nprocess.env.ATSCM_CONFIG_PATH = join(__dirname, <span class=\"hljs-string\">'../Atviseproject.js'</span>);\n\n<span class=\"hljs-comment\">// Your app comes here...</span></code></pre>\n</li>\n<li><p>You can set it every time you run your application:</p>\n<p>E.g. instead of running your app with <code>node ./app.js</code> you can use <code>ATSCM_CONFIG_PATH=&quot;/my-project/Atviseproject.js&quot; node ./app.js</code>.</p>\n<p>You can also use npm scripts so you simply have to run <code>npm run start</code>:</p>\n<pre><code class=\"language-json\">// package.json\n{\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;ATSCM_CONFIG_PATH=&#39;/my-project/Atviseproject.js&#39; node ./app.js&quot;\n  }\n}</code></pre>\n<p>If your running on windows, use <a href=\"https://www.npmjs.com/package/cross-env\"><code>cross-env</code></a> to set the environment variable (don&#39;t forget <code>npm install cross-env</code>):</p>\n<pre><code class=\"language-json\">// package.json\n{\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;cross-env ATSCM_CONFIG_PATH=&#39;/my-project/Atviseproject.js&#39; node ./app.js&quot;\n  }\n}</code></pre>\n</li>\n</ul>\n<h2 id=\"usage\">Usage</h2><p>Require <code>atscm/api</code> and call the methods you need:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// Set process.env.ATSCM_CONFIG_PATH here...</span>\n\n<span class=\"hljs-keyword\">const</span> atscm = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'atscm/api'</span>);\n\n<span class=\"hljs-comment\">// You can use atscm here...</span></code></pre>\n<h2 id=\"examples\">Examples</h2><p><strong>Create an export file for a node</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// app.js</span>\n\n<span class=\"hljs-comment\">// Import node core modules</span>\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-attr\">promises</span>: fsp } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);\n<span class=\"hljs-keyword\">const</span> { join, dirname } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n\n<span class=\"hljs-comment\">// Set atscm config env variable</span>\nprocess.env.ATSCM_CONFIG_PATH = join(__dirname, <span class=\"hljs-string\">'./Atviseproject.js'</span>);\n\n<span class=\"hljs-comment\">// Require atscm and node-opcua APIs</span>\n<span class=\"hljs-keyword\">const</span> { NodeId } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'atscm'</span>);\n<span class=\"hljs-keyword\">const</span> { callMethod } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'atscm/api'</span>);\n<span class=\"hljs-keyword\">const</span> { Variant, DataType, VariantArrayType } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'node-opcua'</span>);\n\n<span class=\"hljs-comment\">// Configuration: You could also use process.argv here...</span>\n<span class=\"hljs-keyword\">const</span> nodesToExport = [<span class=\"hljs-string\">'AGENT.DISPLAYS.Main'</span>];\n<span class=\"hljs-keyword\">const</span> exportPath = <span class=\"hljs-string\">'./out/export.xml'</span>;\n\n<span class=\"hljs-comment\">// Our main function</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createExportFile</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Exporting nodes: <span class=\"hljs-subst\">${nodesToExport.join(<span class=\"hljs-string\">','</span>)}</span>`</span>);\n\n  <span class=\"hljs-comment\">// Use the 'exportNodes' method to create an xml export on the server</span>\n  <span class=\"hljs-keyword\">const</span> {\n    <span class=\"hljs-attr\">outputArguments</span>: [{ value }],\n  } = <span class=\"hljs-keyword\">await</span> callMethod(<span class=\"hljs-keyword\">new</span> NodeId(<span class=\"hljs-string\">'AGENT.OPCUA.METHODS.exportNodes'</span>), [\n    <span class=\"hljs-keyword\">new</span> Variant({\n      <span class=\"hljs-attr\">dataType</span>: DataType.NodeId,\n      <span class=\"hljs-attr\">arrayType</span>: VariantArrayType.Array,\n      <span class=\"hljs-attr\">value</span>: nodesToExport.map(<span class=\"hljs-function\"><span class=\"hljs-params\">id</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> NodeId(id)),\n    }),\n  ]);\n\n  <span class=\"hljs-comment\">// Create the output directory if needed</span>\n  <span class=\"hljs-keyword\">await</span> fsp.mkdir(dirname(exportPath), { <span class=\"hljs-attr\">recursive</span>: <span class=\"hljs-literal\">true</span> });\n\n  <span class=\"hljs-comment\">// Write the export to the file</span>\n  <span class=\"hljs-keyword\">await</span> fsp.writeFile(exportPath, value);\n\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Export written to <span class=\"hljs-subst\">${exportPath}</span>`</span>);\n}\n\n<span class=\"hljs-comment\">// Run it and catch any errors</span>\ncreateExportFile().catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.error(error);\n  process.exitCode = <span class=\"hljs-number\">1</span>;\n});</code></pre>\n<blockquote>\n<p>Note: The example assumes the Atviseproject file is located in the same directory as the app&#39;s entry file. Otherwise you have to adjust you code accordingly.</p>\n</blockquote>\n","sections":[{"title":"Installation","slug":"installation"},{"title":"Configuration","slug":"configuration"},{"title":"Usage","slug":"usage"},{"title":"Examples","slug":"examples"}],"title":"Guide: Using the API"}