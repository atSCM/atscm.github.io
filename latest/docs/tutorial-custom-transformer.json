{"content":"<h1 id=\"tutorial-custom-transformer\">Tutorial: Custom Transformer</h1><blockquote>\n<p>tl;dr: Jump to the <a href=\"https://github.com/atSCM/tutorial-custom-transformer\">tutorial-custom-transformer repository</a> to see the results.</p>\n</blockquote>\n<p>In this document we&#39;ll guide you through the steps necessary to implement a custom Transformer.\nOur transformer will use <a href=\"http://babeljs.io\">Babel</a> to transpile ES2015/ES6 JavaScript to plain ES5 JavaScript that works in all Browsers.</p>\n<h2 id=\"overview\">Overview</h2><p>Custom transformers provide an easy way to extend the build functionality of <em>atscm</em>. Basically, a transformer implements two behaviours: How atvise server nodes are mapped to files (when running <code>atscm pull</code>) and vice versa (when running <code>atscm push</code>).</p>\n<p><strong>Where to store transformers</strong></p>\n<p>Basically, transformers can be stored anywhere inside your <em>atscm</em> project. When using a non-ES5 configuration language (such as ES2015 or TypeScript, chosen when running <code>atscm init</code>) transformers should also be written in this language. <em>atscm</em> will handle the transpilation of your transformer code automatically. If you plan to write multiple custom transformers for your project, it is recommended to create your transformers in an own directory, e.g <code>./atscm</code>.</p>\n<h2 id=\"step-0-project-setup\">Step 0: Project setup</h2><p>In order to have the same starting point, create a new <em>atscm</em> project to follow this tutorial. Run <code>atscm init</code> and <strong>pick ES2015 as configuration language</strong>.</p>\n<p>As for now the atvise library is written in old ES5 JavaScript, we&#39;ll ignore it in our project. Adjust your project configuration accordingly:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Atviseproject.babel.js</span>\n\n...\n\nexport <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyProject</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Atviseproject</span> </span>{\n  ...\n\n  static <span class=\"hljs-keyword\">get</span> ignoreNodes() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">super</span>.ignoreNodes\n      .concat([<span class=\"hljs-string\">'ns=1;s=SYSTEM.LIBRARY.ATVISE'</span>]);\n  }\n\n}</code></pre>\n<p>Now we&#39;re ready to pull the project by running:</p>\n<pre><code>atscm pull</code></pre><p>We&#39;ll use the default project files for testing later.</p>\n<p>As suggested above, we&#39;ll store our custom transformer inside a new directory, <code>./atscm</code>. Create the directory and an empty file called <em>BabelTransformer.js</em>:</p>\n<pre><code class=\"language-bash\">mkdir atscm\ntouch atscm/BabelTransformer.js</code></pre>\n<p>By now you should have a project containing an <code>./Atviseproject.babel.js</code> and an empty <code>./atscm/BabelTransformer.js</code> file.\nMake sure the <code>./src</code> directory contains at least the <em>default Main display</em> which should exist inside <code>./src/AGENT/DISPLAYS/Main.display</code>.</p>\n<h2 id=\"step-1-import-partialtransformer-class\">Step 1: Import <em>PartialTransformer</em> class</h2><p>As we don&#39;t want to implement things twice we&#39;ll subclass <em>atscm</em>&#39;s <a href=\"https://atscm.github.io/atscm/class/src/lib/transform/Transformer.js~Transformer.html\">Transformer class</a>. As our transformer shall only be used for JavaScript source files we can even use the <a href=\"https://atscm.github.io/atscm/class/src/lib/transform/PartialTransformer.js~PartialTransformer.html\">PartialTransformer class</a> which supports filtering source files out of the box. As both of these classes are exported from <em>atscm</em>&#39;s main file, importing them is pretty straightforward. Inside the <em>BabelTransformer.js</em> file add:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// atscm/BabelTransformer.js</span>\n\n<span class=\"hljs-keyword\">import</span> { PartialTransformer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'atscm'</span>;</code></pre>\n<h2 id=\"step-2-create-the-babeltransformer-class\">Step 2: Create the <em>BabelTransformer</em> class</h2><p>The next step is to create and export our Transformer class:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// atscm/BabelTransformer.js</span>\n\n<span class=\"hljs-keyword\">import</span> { PartialTransformer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'atscm'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BabelTransformer</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PartialTransformer</span> </span>{}</code></pre>\n<p>We just created a <em>PartialTransformer</em> subclass that is exported as the file&#39;s default export. For more detailed information on ES2015&#39;s module system <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export\">take a look at the docs</a>.</p>\n<h2 id=\"step-3-use-babeltransformer\">Step 3: Use <em>BabelTransformer</em></h2><p>By default, <em>atscm</em> uses just some standard transformers. Any additional transformers must be configured to use inside the project&#39;s <em>Atviseproject</em> file.</p>\n<p>First of all, we have to import our newly created <em>BabelTransformer</em> class:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Atviseproject.babel.js</span>\n\n<span class=\"hljs-keyword\">import</span> { Atviseproject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'atscm'</span>\n<span class=\"hljs-keyword\">import</span> BabelTransformer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./atscm/BabelTransformer'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyProject</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Atviseproject</span> </span>{ ... }</code></pre>\n<p>Now we override the <em>Atviseproject.useTransformers</em> <a href=\"https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Functions/get\">getter</a> to use our transformer:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Atviseproject.babel.js</span>\n\n...\n\nexport <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyProject</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Atviseproject</span> </span>{\n  ...\n\n  static <span class=\"hljs-keyword\">get</span> useTransformers() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">super</span>.useTransformers\n      .concat(<span class=\"hljs-keyword\">new</span> BabelTransformer());\n  }\n\n}</code></pre>\n<p>This statement tells <em>atscm</em> to use a new <em>BabelTransformer</em> instance <strong>in addition to the default transformers</strong> (<code>super.useTransformers</code>).</p>\n<p>To verify everything worked so far run <code>atscm config</code>. Our new Transformer should show up in the <em>useTransformers</em> section:</p>\n<pre><code>$ atscm config\n[08:38:16] Configuration at ~/custom-transformer/Atviseproject.babel.js\n{ host: &#39;10.211.55.4&#39;,\n  port:\n   { opc: 4840,\n     http: 80 },\n  useTransformers:\n   [ DisplayTransformer&lt;&gt;,\n     ScriptTransformer&lt;&gt;,\n     BabelTransformer&lt;&gt; ],\n  ...</code></pre><h2 id=\"step-4-implement-partialtransformershouldbetransformed\">Step 4: Implement <em>PartialTransformer#shouldBeTransformed</em></h2><p><a href=\"https://atscm.github.io/atscm/class/src/lib/transform/PartialTransformer.js~PartialTransformer.html#instance-method-shouldBeTransformed\">PartialTransformer#shouldBeTransformed</a> is responsible for filtering the files we want to transform. Returning <code>true</code> means the piped file will be transformed, <code>false</code> bypasses the file.</p>\n<p>In out case we want to edit all JavaScript source files. Therefore we return true for all files with the extension <code>.js</code>. Edit <em>BabelTransformer.js</em> accordingly:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// atscm/BabelTransformer</span>\n\n...\n\nexport <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BabelTransformer</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PartialTransformer</span> </span>{\n\n  shouldBeTransformed(file) {\n    <span class=\"hljs-keyword\">return</span> file.extname === <span class=\"hljs-string\">'.js'</span>;\n  }\n\n}</code></pre>\n<h2 id=\"step-5-implement-transformertransformfromfilesystem\">Step 5: Implement <em>Transformer#transformFromFilesystem</em></h2><p>Implementing <a href=\"https://atscm.github.io/atscm/class/src/lib/transform/Transformer.js~Transformer.html#instance-method-transformFromFilesystem\">Transformer#transformFromFilesystem</a> is probably the most important part of this tutorial. In here we define the logic that actually creates ES5 code from ES2015 sources.</p>\n<p>First of all, we need to <strong>install additional dependencies</strong> required. Running</p>\n<pre><code class=\"language-bash\">npm install --save-dev babel-core babel-preset-2015</code></pre>\n<p>will install <a href=\"http://babeljs.io\">Babel</a> and it&#39;s ES2015 preset. This preset ensures all ES5 compatible browsers will be able to run the resulting code.</p>\n<p>We will also need the <a href=\"https://nodejs.org/api/buffer.html\">node.js buffer module</a>. We don&#39;t need to install it, as it comes with every node installation.</p>\n<p>Next, import these modules as usual:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// atscm/BabelTransformer.js</span>\n\n<span class=\"hljs-keyword\">import</span> { Buffer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'buffer'</span>;\n<span class=\"hljs-keyword\">import</span> { PartialTransformer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'atscm'</span>;\n<span class=\"hljs-keyword\">import</span> { transform } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'babel-core'</span>;\n\n...</code></pre>\n<p>The import order follows a pretty usual convention:</p>\n<ol>\n<li>Core <strong>node.js modules</strong> (<em>buffer</em> in our case)</li>\n<li>Other <strong>external modules</strong> (<em>babel-core</em> and <em>atscm</em> in our case)</li>\n<li><strong>Relative modules</strong> (<em>./atscm/BabelTransformer.js</em> inside <em>Atviseproject.babel.js</em> in our case)</li>\n</ol>\n<p>Now we&#39;re ready to implement <em>Transformer#transformFromFilesystem</em>. What we&#39;re about to do is pretty simple:</p>\n<ul>\n<li>We&#39;ll transpile the contents of the passed file with babels <em>transform</em> method</li>\n<li>We clone the passed file and set it&#39;s contents to a Buffer containing the resulting code</li>\n<li>We pass the resulting file to other streams</li>\n</ul>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> ...\n\nexport <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BabelTransformer</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PartialTransformer</span> </span>{\n\n  <span class=\"hljs-keyword\">static</span> shouldBeTransformed(file) { ... }\n\n  transformFromFilesystem(file, enc, callback) {\n    <span class=\"hljs-comment\">// Create ES5 code</span>\n    <span class=\"hljs-keyword\">const</span> { code } = transform(file.contents, {\n      <span class=\"hljs-attr\">presets</span>: [<span class=\"hljs-string\">'es2015'</span>]\n    });\n\n    <span class=\"hljs-comment\">// Create new file with ES5 content</span>\n    <span class=\"hljs-keyword\">const</span> result = file.clone();\n    result.contents = Buffer.from(code);\n\n    <span class=\"hljs-comment\">// We're done, pass the new file to other streams</span>\n    callback(<span class=\"hljs-literal\">null</span>, result);\n  }\n\n}</code></pre>\n<p><strong>Wow!</strong> You just implemented your first custom transformer! Now we can write any scripts using the new ES2015 syntax.</p>\n<h2 id=\"step-6-test-babeltransformer\">Step 6: Test <em>BabelTransformer</em></h2><p>It&#39;s time to check if everything works as expected. Create a script file for the Main display containing ES2015 JavaScript:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// src/AGENT/DISPLAYS/Main.display/Main.js</span>\n\n<span class=\"hljs-comment\">// Class syntax</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(options = {}, ...otherArgs) {\n    <span class=\"hljs-comment\">// Default values and rest params</span>\n    <span class=\"hljs-keyword\">this</span>.options = options;\n    <span class=\"hljs-keyword\">this</span>.args = otherArgs.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">arg</span>) =&gt;</span> <span class=\"hljs-built_in\">parseInt</span>(arg, <span class=\"hljs-number\">10</span>)); <span class=\"hljs-comment\">// Arrows and Lexical This</span>\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-number\">13</span>; <span class=\"hljs-comment\">// Constants</span>\n<span class=\"hljs-keyword\">const</span> { options, args } = <span class=\"hljs-keyword\">new</span> Test({ a }, <span class=\"hljs-string\">'23'</span>); <span class=\"hljs-comment\">// Enhanced Object Literals</span>\n\nalert(<span class=\"hljs-string\">`Option a: <span class=\"hljs-subst\">${options.a}</span>, args: <span class=\"hljs-subst\">${args.join(<span class=\"hljs-string\">', '</span>)}</span>`</span>); <span class=\"hljs-comment\">// Template Strings</span></code></pre>\n<p>Run <code>atscm push</code> to upload the new display script to atvise server. Open your atvise project in your favorite browser (you may have to delete the browser cache) and if everything worked you should see an alert box containing the text &quot;Option a: 13, args: 23&quot;. When you inspect the page&#39;s source you&#39;ll see the display script code was transpiled to ES5.</p>\n<h2 id=\"step-7-implement-transformertransformfromdb\">Step 7: Implement <em>Transformer#transformFromDB</em></h2><p>As said at the beginning, atscm transformers allow transformation from and to the filesystem. A babel transpilation is a one-way process, meaning you cannot create ES2015 source code from the resulting ES5 code. Therefore the only thing we can do when transforming from atvise server to the filesystem is to prevent an override.</p>\n<p>We do so by implementing <a href=\"https://atscm.github.io/atscm/class/src/lib/transform/Transformer.js~Transformer.html#instance-method-transformFromDB\">Transformer#transformFromDB</a>:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// atscm/BabelTransformer.js</span>\n...\n\nexport <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BabelTransformer</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PartialTransfromer</span> </span>{\n  ...\n\n  transformFromDB(file, enc, callback) {\n    <span class=\"hljs-comment\">// Optionally, we could print a warning here</span>\n    callback(<span class=\"hljs-literal\">null</span>); <span class=\"hljs-comment\">// Ignore file, remove it from the stream</span>\n  }\n}</code></pre>\n<p>Now we can run <code>atscm push</code> without overriding our ES2015 source code.</p>\n<h2 id=\"result\">Result</h2><p>This is how your custom transformer should look now:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// atscm/BabelTransformer.js</span>\n\n<span class=\"hljs-keyword\">import</span> { Buffer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'buffer'</span>;\n<span class=\"hljs-keyword\">import</span> { PartialTransformer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'atscm'</span>;\n<span class=\"hljs-keyword\">import</span> { transform } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'babel-core'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BabelTransformer</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PartialTransformer</span> </span>{\n  shouldBeTransformed(file) {\n    <span class=\"hljs-keyword\">return</span> file.extname === <span class=\"hljs-string\">'.js'</span>;\n  }\n\n  transformFromFilesystem(file, enc, callback) {\n    <span class=\"hljs-comment\">// Create ES5 code</span>\n    <span class=\"hljs-keyword\">const</span> { code } = transform(file.contents, {\n      <span class=\"hljs-attr\">presets</span>: [<span class=\"hljs-string\">'es2015'</span>],\n    });\n\n    <span class=\"hljs-comment\">// Create new file with ES5 content</span>\n    <span class=\"hljs-keyword\">const</span> result = file.clone();\n    result.contents = Buffer.from(code);\n\n    <span class=\"hljs-comment\">// We're done, pass the new file to other streams</span>\n    callback(<span class=\"hljs-literal\">null</span>, result);\n  }\n\n  transformFromDB(file, enc, callback) {\n    callback(<span class=\"hljs-literal\">null</span>); <span class=\"hljs-comment\">// Ignore file, remove it from the stream</span>\n  }\n}</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2><p>We just created a custom Transformer in no time. It transpiles ES2015 code on push and prevents overriding this code on pull.</p>\n<p>Of course there are many ways to improve the transformer, for example:</p>\n<ul>\n<li>Handle options to configure how babel transpiles the source code</li>\n</ul>\n<h2 id=\"further-reading\">Further reading</h2><ul>\n<li><a href=\"http://babeljs.io/learn-es2015/\">babeljs.io</a> provides a nice overview of ES2015 features. You can also use the <a href=\"http://babeljs.io/repl/\">REPL</a> to try out these features.</li>\n</ul>\n","sections":[{"title":"Overview","slug":"overview"},{"title":"Step 0: Project setup","slug":"step-0-project-setup"},{"title":"Step 1: Import PartialTransformer class","slug":"step-1-import-partialtransformer-class"},{"title":"Step 2: Create the BabelTransformer class","slug":"step-2-create-the-babeltransformer-class"},{"title":"Step 3: Use BabelTransformer","slug":"step-3-use-babeltransformer"},{"title":"Step 4: Implement PartialTransformer#shouldBeTransformed","slug":"step-4-implement-partialtransformershouldbetransformed"},{"title":"Step 5: Implement Transformer#transformFromFilesystem","slug":"step-5-implement-transformertransformfromfilesystem"},{"title":"Step 6: Test BabelTransformer","slug":"step-6-test-babeltransformer"},{"title":"Step 7: Implement Transformer#transformFromDB","slug":"step-7-implement-transformertransformfromdb"},{"title":"Result","slug":"result"},{"title":"Conclusion","slug":"conclusion"},{"title":"Further reading","slug":"further-reading"}],"title":"Tutorial: Custom Transformer"}